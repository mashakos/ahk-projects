#Requires AutoHotkey v2.0
#SingleInstance
Persistent

#Include Gdip_All.ahk

global SHAKE_DIST := 20
global SHAKE_SLICE_TIMEOUT := 75 ; milliseconds
global SHAKE_TIMEOUT := 500 ; milliseconds
global SHOWING_TIMEOUT := 750 ; milliseconds
global needed_shake_count := 4 ; set from configuration

global VERSION  := "1.0"
global APP_NAME := "ShakeMouseToLocate"
global EXE_NAME := A_ScriptFullPath
global TRAY_TOOLTIP := APP_NAME . " V" . VERSION . "`r`n" . "Quickly move the mouse pointer left and right" . "`r`n"
                        . "to make it temporarily bigger"
global ABOUT_TEXT := APP_NAME . " V" . VERSION . "`r`n"
                          . "`r`n"
                          . "Shake or circle the mouse quickly and a big mouse" . "`r`n"
                          . "will show for a short while. This will help you find" . "`r`n"
                          . "back the mouse cursor." . "`r`n"
                          . "`r`n"
                          . "Forked by Mohamed Al Arabi (https://delosian.pro)" . "`r`n"
                          . "Original by Spinal Cord (http://spinalcode.co.uk/)" . "`r`n"
                          . "`r`n"
                          . "Altered to hide the OS cursor while the" . "`r`n"
                          . "mouse is being shaken. Now it shows only after" . "`r`n"
                          . "the mouse pointer has stopped moving." . "`r`n"
                          . "`r`n"
                          . "Ported to AutoHotkey in order to allow for" . "`r`n"
                          . "the hiding of the cursor gracefully."

global REGKEY_AUTORUN := "HKCU\Software\Microsoft\Windows\CurrentVersion\Run"
global REGKEY_CONFIG  := "HKCU\Software\" . APP_NAME
global REGKEY_ENABLED := "Enabled"
global REGKEY_TCTRL   := "CtrlNeeded"
global REGKEY_SENSIT  := "Sensitivity"

global SENSITIVITY_HIGH   := 2
global SENSITIVITY_MEDIUM := 4
global SENSITIVITY_LOW    := 7

global AC_SRC_ALPHA := 1

global idAbout, idExit, idAutoStart, idEnabled, idUseCtrl, idSensit, idSensit0, idSensit1, idSensit2
global hBmp, hIcon
global oldMX, oldMY, curMx, curMY, distX, distY, distPix
global GuiBackColor := "F0F0F0"
global showing := 0
global running := 1
global ScreenCheck_Init := 0
global ScreenCheck_Tick := 0


global Tray := A_TrayMenu ; For convenience.


; -------------------------------
; CREATE BIG ICON
; -------------------------------


;Code below was generated by: 'File to Base64 String' Code Generator v1.19 Build 2014-11-14
_Torus()
{
  Pointer := 'iVBORw0KGgoAAAANSUhEUgAAANoAAAFoCAYAAAAxaOURAAAACXBIWXMAAAsTAAALEwEAmpwYAAApNUlEQVR4nO2deXhV1dX/P0kkYRASEhlElCEChhlkEC0F9AVkLGAShkwCYVCKVWtbX+uv4Py2VFutU1UQ0AgCAqKCTDIrpQpioQ4MIpiSQEgMc4Cwf39soULuueckuffcc85dn+fZj5i9zj0r9+Z79z5rr712hFJqEvAqcAZBEIJChFLqFPAScH+onREErxIJnAbuA6aG1hVB8C6RwLEf/z0FeCKEvgiCZ4kEon7y/w8BT4bIF0HwLJE+fva/wON2OyIIXsaX0AB+DzxmpyOC4GWMhAbwMBIgEYSA4E9ooAMkj9jhiCB4GTOhAfwBiUYKQqWwIjSQaKQgVAqrQgMdjZQAiSBUgPIIDXSA5NFgOCIIXqa8QgP4f+ggiSAIFqmI0ECH/X8fQD8EwdP4FNqZM2fYtGkTR48e9Xft4+iIpCAIJvgUWmlpKffddx/332+6c+YRZBopCKb4FFqVKlWoU6cO06dPZ+rUqWavMRX93CYIggE+hRYREUFsbCwAjzzyCH/4g+kM8VF0RFIQBB8YBkOUUhf//dhjj/HII6aZWI+hF7YFQbgMy1HHqVOnWhHbE0g0UhDKUK7w/tSpU3n0UdP16seRAIkgXEK519GmTJnCk0+apj1ORcQmCBep0IL173//e554wjShfyoSjRQEoOKZITz88MP8+c9/NjN7FBGbIFRcaAC/+c1vrIxsjyLRSCHMqZTQQI9sFsT2BHqbjSCEJZUWGmixPfXUU2ZmTyJiE8KUgAgN4KGHHrIqNplGCmFHwIQGWmwWQv9PAL8L5H0FwekEVGigQ/+PPWZa8eD/ELEJYUTAhQbwhz/8gT/96U9mZv8H/CYY9xcEpxEUoQH87ne/szKN/BPwQLB8EASnEDShgeVp5DTgwWD6IQihJqhCA8vTyKeQ0L/gYYIuNNDTyGee'
  Pointer .= 'ecbMTNbZBM9ii9AAfv3rX/Pss8+amT2JRCMFD2Kb0ADuvfdeiUYKYYmtQgM9jXz66afNzCQaKXgK24UG8MADD1gRm0QjBc8QEqGBFpuFAMlTyDRS8AAhExroAIlMI4VwIKRCg3JNI39tgzuCEBRCLjTQYnvuuefMzKYB99ngjiAEHEcIDeBXv/oV06ZN82cSATwD3GOPR4IQOBwjNIDf/va3VtbZnkWmkYLLcJTQAB588EH+8pe/mJn9GRGb4CIcJzSlFPfffz9//etfzUxFbIJrcJzQLnDffffx0ksvmZmJ2ARX4FihAdx999387W9/MzObBtwbfG8EoeI4WmgA99xzD88//7w/kwjgL8Cv7PFIEMqP44UGMHnyZCvrbH9F1tkEh+IKoYHeYmNhP9szyDOb4EBcIzSlFPfeey8vvPCCmemfkZFNcBiuEdoFfvnLX/Liiy+amUkGieAoXCc0gEmTJvHKK6+Ymf0V+GXwvREEc1wpNIAJEyaYBUgigOeACfZ4JAjGuFZooBORTdK1IoCXgcn2eCQIvnG10EBvsbHwzPYcIjYhhLheaOfPn2fSpElWopEiNiFkuF5oF7AYjXwOySARQoBnhAY6Gvnyyy+bmT0DTLLBHUG4iKeEBnDXXXcxffp0fyaRwPPAXfZ4JAgeFBpAdna2lWnki8jIJtiEJ4UGOhHZgtieR7bYCDbgWaGdP3+ee+65h1dffdXM9C9IBokQZDwrNIDS0lImTJhg9swG8DckN1IIIp4WGuis/+zsbF5//XUz02eQdC0hSHheaBcYO3asWSJyFDpAMtoej4RwImyEppRi4sSJZgV/IoEZyMgmBJiwERposU2ePNlKgORlRGxCAAkroYEOkEycOJHXXnvNzPRl4G4bXBLCgLATGujQ/7hx46xEI59DMkiEABCWQrtAdna22TQyCr2oPd4ejwSvEtZCAxg/fjwzZszwZxIJvIREI4VKEPZCAz2ymTyzXYhGjrHHI8Fr'
  Pointer .= 'iND4b+jfQoBkOvLMJlQAEdqPlJaWcvfdd/PGG2+Ymb6APLMJ5USE9hPOnj3L6NGjefPNN/2ZRaCf2Sba45XgBURol1FaWkpGRobZyBaJHtlEbIIlRGgGjBkzhpkzZ/ozubBTO8sWhwRXI0Iz4Ny5c4wdO9bKOtsMINMerwS3IkLzw/nz57nrrrvMtthEAjOBDFucElyJCM2E0tJSxo0bZzaNjABmAWNtcUpwHSI0C5SWlpKdnW0lGin72QSfiNAsUlpaSlZWllk0Mhp4FckgES5DhFYOzp8/T1ZWFrNmzfJnFgX8HXlmE36CCK2cXKhBYhKNvAL9zJZuj1eC0xGhVYBz585ZqYgcAbyBPLMJiNAqTGlpKZMmTeLtt982M/07sqgd9ojQKkFJSQkZGRnMmTPHn1kVJEAS9ojQKsnZs2fJzMw0G9mqAK8g08iwRYQWAM6dO0dWVhZvvfWWP7MotNgkGhmGiNACRElJCXfeeadZ6F+ikWGKCC2AnD17lgkTJlhJ15oJpNrhk+AMRGgBpqSkhPHjx5tlkEQBOcg0MmwQoQWBs2fPMm7cOLMAyRXondoj7fFKCCUitCBRUlJCeno6c+fO9WdWA3gdeWbzPCK0IHLu3DkyMzPNxBYDvAYMt8crIRSI0ILMhYI/JgGSGHS6VootTgm2I0KzgdOnT1uJRlYB5gBptjgl2IoIzSbOnDnDxIkTzaaRUegirRIg8RgiNBu5sKg9f/58f2YxSA0SzyFCs5kLiciLFy/2Z3Zhp7ZMIz2CCC0ElJSUkJaWZmVkm4FMIz2BCC1EnDx5kqysLLNntmhgNhKNdD0itBBy6tQpsrOzycnJ8Wd2BfAWkhvpakRoIebEiRNkZ2dbSdfKQaaRrkWE5gBOnz7N6NGjeeedd/yZXYE+wD7ZHq+EQCJCcwinTp1i1KhRLFiwwJ9ZLfR+NplGugwRmoM4c+YMGRkZZtHI6uh1tmG2OCUEBBGaw7gwjTQJkFRDB0h+'
  Pointer .= 'YY9XQmURoTmQEydOMH78eLMaJDHA28jI5gpEaA7l5MmTZGdnM2/ePH9mMeh1tqH2eCVUFBGagzl16hSZmZlmz2w1gDeBEfZ4JVQEEZrDKSkpISsriyVLlvgzq47OjZQMEociQnMBp06dIi0tzSwR+Ur0NPIOW5wSyoUIzSUcP36cjIwMs3W2qugMksH2eCVYRYTmIo4fP24lXSsGmI+E/h2FCM1lFBcXk52dzcKFC/2ZRSOJyI5ChOZCjh8/TmZmptUAiYT+HYAIzaWcOHGCESNG8O677/ozq4UOkAyxxSnBEBGaizl16hTp6elmI9uV6ADJIHu8EnwhQnM5F6KRJhkk1YG5QH97vBIuR4TmAY4ePWolXas6OhopYgsBIjSPcOzYMbKzs1m0aJE/s+roIq0iNpsRoXmIY8eOkZ6ebiVAMheJRtqKCM1jnDx5krS0NN577z1/ZjXRB2vIorZNiNA8yIXQv0k0Mh69qC3pWjYgQvMoJ0+eJCMjw8qitjyz2YAIzcMcPXqU0aNHmyUiSzTSBkRoHqewsJDs7GyzAEl1dFkEmUYGCRFaGFBcXExGRgZLly71Z3Yl+pjfAfZ4FV6I0MKEY8eOkZqayocffujPLB79zCah/wAjQgsjLkQjTcRWE33MrzyzBRARWphRXFzMyJEjzcoi1EAvave2xakwQIQWhvzwww+MGTPGLF2rJvAOcKs9XnkbEVqYUlRUxNixY82ikRfE9j/2eOVdRGhhTFFREenp6XzwwQf+zOKAecgzW6UQoYU5x48fZ9SoUSxfvtyfWW30Mb+32+OV9xChCRw9epTk5GSzdbZ66JGtnz1eeQsRmgD8d2SzkPX/NhKNLDciNOEixcXFjB492iz0fyFAcpstTnkEEZpwCUeOHGHs2LFm08iawAKgrz1euR8RmlCGwsJCRo0axcqVK/2ZxaFPsZFppAVEaIJPiouLSU5O5qOPPvJndhX6mU0SkU0QoQmGHD16lJSUFDOx'
  Pointer .= '1UaPbBL694MITfBLYWEhKSkpLFu2zJ9ZHDr0L9NIA0RogimFhYVkZWVZCZDMA262xyt3IUITLHH48GGysrJ4//33/ZnFAUuA7rY45SJEaIJlCgoKSE9PZ9WqVf7MEpB1tjKI0IRyUVxcTGpqqlmApA4wC+hlj1fOR4QmlJuioiKGDh1qNrJdgx7ZJECCCE2oIEePHmX48OFmZRFqowMkPezxyrmI0IQKU1hYaKVIaxywCPiZLU45FBGaUCkKCgoYO3aslf1siwnjkU2EJlSagoICRo0axdq1a/2ZJaAL/oSl2ERoQkAoLCxk2LBhbNy40Z9ZffQzWx97vHIOIjQhYBQVFTFs2DA2bNjgz6wuOjcyrNbZRGhCQDl8+DDDhg1j9erV/szqEGal7ERoQsApKCggLS3NbD9bLFps3ezxKrSI0ISgkJ+fT3p6ulkichw6N9LzYhOhCUHj0KFDpKens27dOn9mV6FHNk+vs4nQhKBSVFTEHXfcYRaNvBodILnFHq/sR4QmBJ0jR44wePBgs2hkI2AhHl1nE6EJtlBUVGSlBkldtNg8N7KJ0ATbOHToEKNGjbJyGOK7QBd7vLIHEZpgK/n5+WRlZbFixQp/ZgnoaKRnxCZCE2zn0KFDjBgxwmwaWQ8djbzJHq+CiwhNCAlFRUWkpqbyz3/+059ZQ2A+HqhBIkITQsaRI0cYNGgQW7Zs8WfWEJ3172qxidCEkJKfn8/AgQPN1tkaoAMkP7fHq8AjQhNCzuHDhxkxYgRr1qzxZ1YbHfp3ZYBEhCY4gtzcXNLS0syy/hOA93FhgESEJjiGgwcPMmLECDZt2uTPrA56ZOtqj1eBQYQmOIqCggJ+8YtfsHnzZn9mVwM5QCd7vKo8IjTBcVyIRpqE/hPRI5srppEiNMGRFBQUWElEvhZdys7xARIRmuBY8vLyrJQfrw+8B3S0x6uKIUITHE1eXh7p6elmof+6aLG1s8er8iNCExzPwYMHSU1NNdup'
  Pointer .= '3QAtNkcGSERogisoKCggOTnZLEByLToR2XGhfxGa4BoKCgoYOHAgn376qT+z69AH2DtKbCI0wVUcOnSIgQMHmo1sjdD72RwjNhGa4Dry8/O54447rFREfheHRCNFaIIrOXDgAOnp6axfv96fWT10bmR7W5zygwhNcC379+9n+PDhZvvZrkaPbDfa45VvRGiCq8nLy7MaIJlPCEP/IjTB9Rw+fJgBAwbw+eef+zNrghZbSEY2EZrgCS5EIz/55BN/Zo3RJ4/aLjYRmuAZcnNzSUlJMdvP1pAQpGuJ0ARPkZuby/Dhw63U+l8CtLTHKxGa4EEsjmzXoUP/toxsIjTBk+Tl5ZGcnMy2bdv8mTUBFgAdgu2PCE3wLHl5efTv35/t27f7M7sefYB9UEP/IjTB0+Tl5dG3b18+++wzf2bXo3dqB01sIjTB8+Tn55OcnGwW+m+IDpC0DYYPIjQhLNi3bx+ZmZlWqmt9ALQO9P1FaELYsHv3blJTU80CJA3Ri9oBHdlEaEJYceDAAQYMGGAWIElERyMDtsVGhCaEHQcPHmTAgAF8+eWX/syaoaORAUnXEqEJYUlubi79+vUzm0ZeKNJa6ZFNhCaELd999x3Dhg0zC/1fh35ma1OZe4nQhLBm3759VkL/16JD/y0qeh8RmhD27Nu3j1GjRpnt1G6MzvpvVZF7iNAEAS22YcOGsXPnTn9mzdCbR8s9jRShCcKP5Obm0rdvX7NoZBK6bmT78ry2CE0QfkJubi59+vThiy++8GeWhK6IbDnrX4QmCJfx/fffM3ToULN0raaUIxopQhMEH+zdu5fMzEy2bt3qz+w6dIDkBrPXE6EJggG7du0iJSXFbBp5ofy432ikCE0Q/LB3714GDhzIjh07/Jk1Q+dGGiYii9AEwYQDBw4waNAgdu/e7c/sBmAuBtFIEZogWGDfvn107dqV5cuX+zNLwqAGyRXBckwQvEJUVBRJSUnExMSQm5trZp6ILoswCPjX'
  Pointer .= 'hR+K0AThMmrXrk3Tpk3p1KkTHTt2pFWrVtxwww3UqFGDqKgolFJERET4e4lGaLHdDuwGEZoQ5lStWpX4+Hiuv/56unTpQsuWLencuTPNmzcnOjq6Mi+diK4bmQlsEaEJYUXt2rVJSEggKSnporC6du1KgwYNzEapitACmAP8rwhN8DTx8fE0adKEDh060K5dO9q1a0fr1q2pXbt2sG55EvgP+vnsn0AusEuEJniKunXrcuONN9KqVSs6duxI69atady4MTVr1gzWLU8D24DPgJ3AF8C3wMGfGonQBFfTvHlzunTpQosWLejWrRtNmzalfv36VKtWLVi3PARsBr4EtgI7gDyg0N9FIjTBNVx55ZW0atWKNm3a0KFDBzp16kSTJk2Ii4ujSpUqgb6dAs6gR6cdP7aNwFfAEfRIZhkRmuBIqlatSkJCAs2bN6dt27Z069bt4jSwRo0awbjlOeAoWlj/Aj5BTwn3okcrVZkXF6EJjqBGjRo0bNiQZs2a0a1bN9q0aUPr1q1p0qRJsG5Zig5U7AU+RYvqS/Rz1plA30yEJoSEhIQEEhMTadmyJV26dLk4ctWpUydYtzyJXjzei44Gfs1/R6ygI0ITbKFRo0a0bNmStm3b0rFjR1q0aEGLFi2oWrVqsG5ZhH6e2omeBv4b+AaToEWwEKEJASc6OppGjRrRtm1bOnXqRIcOHUhKSqJu3brBFFYeOmDxD2A7WmD/AX4I1g3LgwhNqBQRERHExsbSpEkTunXrdnFRuGnTptSsWTNYwjoJHEBP/baigxc70KPYiWDcsLKI0IRyUbVqVeLi4i6mMCUlJdG5c2eaNm1KTExMMNKYzqFHpVxgCzpgsQW9MHycSkYD7UKEJvglLi6OevXq0aZNG1q1akWHDh3o3Lkz9evXJzIyKNsZTwOHgV3obIsdaGHto5xrV05ChCYAegqolKJ27dokJibSpk0b2rVrR+fOnWnRogUJCQnBuvVpdORvB3oKuA39'
  Pointer .= 'fHUAHYL3BCI0AQClFC+++CL9+/cnNjaWuLi4YN3qOPA5Wkzb0aPWfnQww7OI0ISLNGrUiEaNGgX6ZQ+i162+ATah168O4pBooF2I0ISL/PGPf+Tmm2+uzGh2BtiDngZ+jhbYbnSYvSQALroWEZpwkfXr17Nt2zZ69eplxbwUKEYLayfw8Y///RIdZhd+gghNuIT58+fTo0cPo4hiEfq56lP++5z1BXDeNgddipSbEy5h4cKF5OfnG3V/DfQCfgPkoMUmIrOACE24hPz8fObMmWPU3Qq4zUZ3PIMITShDTk6OUVdNYJKNrngGEZpQhl27drF69Wqj7hvRteaFciBCE8pw7Ngxf9PH64BUG93xBCI0wSdr1qzhwIEDRt19gCgb3XE9IjTBJ3v37mXevHlG3T8HBtrojusRoQmGfPjhh/66B9jlhxcQoQmGrFq1ig8++MCoOxk/B+8JlyJCE/yyYsUKo67a6CmkYAERmuCXJUuWsGfPHqPu4WjBCSaI0AS/7Nu3jw0bNhh1/wxoY6M7rkWEJpiSk5PD0aNHjbrTkL8jU+QNEkxZtWoVX375pVF3KnCNje64EhGaYAk/a2pxwB32eeJORGiCJebMmcPBgweNumX6aIK8ORUgIiKC+Pj4YJVbcyQHDx70t4DdAuhhozuuI3z+UgJE9erVefzxx/nggw+CWYLNkbzxxhtGXTXRh6ILBojQysFNN93EqlWreOihh7jppptISUkJtUu2snXrVj7++GOj7p8DDW10x1WI0CxQo0YNnnrqKVavXk23bt0u/nzs2LEh9Mp+iouLmT59ulF3U/SzmuADEZoJgwYNYuPGjTz44INUr179kr6kpCQGDx4cIs9Cw6ZNmygsNDz5qI+dvrgJEZoB11xzDc8//zzz5s2jffv2Pm2qVatGRkaGvY6FmK+//pq33nrLqLsX0N9Gd1yDCM0HgwcP5pNPPmHSpEmmxw716NGDzp072+SZM/CT0R8B9LPRFdcg'
  Pointer .= 'QvsJTZo0Yfbs2SxevJhrr73W0jV16tRh0KBBQfbMWWzYsIH169cbdQ8AEm10xxWI0NAnVI4ePZpVq1aRkZFR7jO+UlJSuO6664LknfM4ceIEy5YtM+pugqyplSHshdaqVSuWLFnCjBkzaNq0aYVe44YbbmDAgPDacLxgwQK+/fZbo+40INZGdxxP2AotJiaGKVOmsGXLFvr27Wvlkp3Ag+gjhsqQkpJCbGz4/G3t3r2bdevWGXXfimyfuYSwFFrPnj1ZuXIlU6dOLROy94EC5qMTZ/8IrPFl1KtXL26++ebAOupwlixZwqlTp4y6h9rpi+NRSuWqyzh37pwaMWKEQv+ReabFx8eradOmqZKSkst/ZSP2KKUylVIRSil+bIOUUid9Gb/55psqOjo65L+nnW3btm1G791/lFL1fvK+hXULmxEtOTmZzZs388ADDxAdHW1mfh54BegCzObSA8nfQ5+gUoaUlJQKP+e5lXfeeceo62qkJN1FPC+0unXrMn36dObPn0+zZpYqWW8HbgcmAEcMbHyW8Y2OjiYzM7xya3Nycvjhhx+MusPrzfCH8vDUcfTo0eq7774zmtpcznGl1ONKqXgLU4HqSqmvfL3IwYMHVf369UP+u9vZ3nrrLaP3tFgp9bNgTcfc1Dw5orVp04aFCxcyY8YMq+tbK4HuwMOAYSLfTzgJ+NxyXL9+fUaMGGHZVy/w2muvGXXVAkbb6IpzUR4a0apUqaImT56s8vPzjb5hL6dAKXWPUiq6At9SzZT+xi7DZ599FvL3ws4WHx/vLyjyjbI2S/B088yI1rp1a1asWMFzzz1H3bp1rVyyDOgGPIc+5Ly87AUW+Opo1apVWO1VKyws9LcptBkQXkO8D1wvtLi4OB566CHWrl1Lz549rVzyHTrQMRjYVYlblwJv+uqIiYkhNTW8TjZavnw5J0+eNOoOr2RQXygXTx27d++uNm7caDRlKfNrKaVylFKJAZwS1FJKrfZ1s4KC'
  Pointer .= 'AtW1a9eQv0d2tldffdXovT+hlOoVwPfddc2VI1pCQgIvv/wy69ev55ZbbrFyyQH0oQxpgGF96wpwFPC55TghISHsgiJ+ts9UJ9y3zyiXjWgjRoxQu3btMvrmLPOrKKWeUUrVDuK31dVKqc993Xz37t0qMTEx5O+ZXS02NlZt2rTJ6LPYrZRqEsTPwdHNNSNaYmIis2bNIicnh+uvv97KJf9AP4fdDxQF0bWDwEJfHYmJiVYTlj1BcXGxv1EtEb2EEpY4XmjR0dFMnDiRDRs2kJmZaaWW4nHgUfS2+qVBd1CzBDjkq2PkyJHUrh0+B658+OGH5OfnG3X/AvC/Zd2rKAdPHdu1a6eWL19uNBXxxQqlVNsQTQ9yjJzq27dvyN9LO9uiRYv8fUbtQ/T5yNTxciIjI7n33ntZt24dffpYKqx0GLgXncTqM+HXBuYAPveMZGZmWklk9gzz5s3j7NmzRt3hWadfOWxE69Wrl/rHP/7h7xvxcnKUUi1C/Y31Y/MZ6ldKqRtvvDHkI41dLSIiQm3fvt3ordivlKrjgM8qPEe0+Ph4nnzySRYvXkyXLl2sXPIN+sigNODroDpnnTnohewyhFNZOqWUv5oi1wL/Y6M7zkA5YETr3bu32rlzp9E34OWcV0q9pJy5qbCqUurfvpzOy8sLq6z+5s2bq8LCQqPPcLUDPqvwGdHq1avHCy+8wLJly2jZsqWVS75BlzO7CzAMbYWQ04DPnZD16tUjLS18KmZ/8803/o7k7Qi0t8+b0BMSoUVFRZGamsrq1au5++67iYqKMrukGJiGLmNmOCdxCLOBY746Ro0aZbMroWXWrFlGXXGE26ZQZfPUMTExUc2ZM8doSuGLrcpdeXKRSqm/+/pFSkpKHLFsYldLSEhQX33lc3+sUnqKXcMBn5e3po5RUVHcf//9bN261WoO4Angd0BXDCpPOZTzwExfHdHR0aSnp9vrTQg5cuSIv02hSUDYRIhsEVrnzp1ZunQp'
  Pointer .= 'Tz/9NLVq1bJyyXvAz4A/AYYLMg7mC+B9Xx3du3e3up3HE3z44YecO3fOqDtsjuIJqtBq1qzJ1KlTWb16tdWF5wPA3eiw/efB9C3InEA/q5WhVq1aJCcn2+xO6Pjqq6/8VcrqBtxkozshI2hC69u3L2vXrmXKlCnUrFnTyiVvATcDL6Gjd25nI/AvXx39+/cnMTE8zoE4d+6cP6HFESYl6QIutLi4OJ555hnef/99OnbsaOWSr4Fh6IXn7wPtTwgxzOpv0qRJWGX1b9iwge3btxt19wMs1Z5wMwEV2qBBg/j444+57777uOKKK8zMzwN/R2fZLwqkHw5iPpDrqyMjI4OrrrrKZndCQ15eHsuXLzfq7oh+Hvc0ARFa06ZNmT17Nu+++y5JSUlWLtmIFthE9De/V9mJwbrfTTfdZHV3uCd45513OHLEqB4tqUAVG92xnUoLLSMjg9WrV1s9V+wYMAU9XTA8yc5jzEfvkStDVlYW1apVs9md0LBlyxY2btxo1J0KWEoNcisVFlqjRo1YtmwZs2fPpnHjxlYuWQf0RG/K9PmH51FWAJt8dQwdOpTWrVvb7E7oeP99nyseoI/k9fTZ1+UWWvXq1bnnnnv45JNPuP32261cUgA8gB7Ftpb3fh5hPgZZ/SNHjrTZldAxf/58du0yrPCXBnh2K3q5hNapUycWLVrEs88+y9VXX23lksVAH+BpDDZFhglz0QVXyzBy5Ejq169vszuhwaSmSCvg5za6Yys+hRYREXFJ1DA2NpbHH3+czZs3l2fH8wT0YXTbAuGoyzkB+MywrV+/PmPGjLHZndAxa9YsiouLjbq9W6df+UgqPnPmjOrdu7cC1IABA8qzV0wppV5VYbiD1kK7Rula/2X44osvVGRkZMiTgO1qK1euNPrbOaKUSnLAZ2VPUnFpaSkNGzZkypQpLF682OpesS/QRUrHo0c04VL+A7ztqyMpKSmsdmC/8sorRl3xQLaNrtiH8jGinT9/'
  Pointer .= 'Xh07dkydP3/e6Jvnp5xWSv1ZKZUQ6m8NF7QuRm/i8uXLQz7S2NWuuuoqtXfvXqO3YodS6goHfFbBH9EiIiK48sorrayLbUIvPD+A8emYwn/Zga4BWYauXbvSo0cPm90JDQUFBcyZ4/PQVIDm6JmRp6joOtpR9KF9vYFPAueO5zmJwfQxNjaWYcOG2exO6Hj33XeNuqqgC616iooIbTl6FHuC8A7ZV5SVwBZfHcnJybRq1cpmd0LD9u3bWbjQZ841wK3oHEjPUB6h7QfGoA9SD9eF50BwGL0lqAwNGjSwmgTgekpKSliwwOc5jqCz+T21fcaq0OYBtwGvB9GXcGI5BluCRo4cSb169Wx2JzRs2rSJr782LMnZHx2F9ARmQtuPfjAdDuwOvjthw1focg1luPHGG7n11lttdic07N+/39+zWlc8lCliJLTTwGvo8m6G22OFSjEfXUavDMOHDw+brP4VK1b4O5LXO4cXKqUOXLaOsVMpNSTU6w5h0j5SBoRTrf5Vq1YZvQ1HlVI3OOBzqnSLBC4kNZ5BFynthE4GFoLP6xhU+Ro/fryVdUxP4Gf6WBOdlO56IpRSp4DtwGTgnyH2JxzZDrS9/IdFRUW0a9eOAwcOhMAle4mNjWXLli00b97cV/e/0I8wRfZ6FVgigfvQoVQRWWiY6+uHtWvXJisry25fQkJxcTHr1xtuuG8DdLbRnaAQCbyM3pwphIbZGBzYkZaWFjZBkZkzZ3LsmM8jC0Cv37oax5yPFsbkos9VK0OzZs2slk93PZs2beKzzz4z6u4NNLXRnYAjQnMG83z9MCoqKqyqGufk5Bh1xQOu/sYRoTmDbRisV/bs2TNs0rKWLVvGoUOHjLqH2ulLoBGhOYPTGKS3Va9ePWxGtdzcXGbOnGnU3QYXHzQvQnMO/wA2++ro169f2GT1z58/36grBp0K6EpEaM6hAIOgSIMGDRg61NUzJ8t8/fXXrFy50qi7K9DCRncChgjNWXyA'
  Pointer .= 'QVm65ORkqyX+XM2xY8f87VO7Dn2GuesQoTmLPeiNoWVo164d3bp1s9md0LBq1Sr27dtn1D0YqGGfN4FBhOY8cjBINxo3bhxXXnmlze7Yz+7du/0VWu2BC0+fEaE5jw3ocwrKcPvtt9OhQweb3QkNS5cupbTUZxV1cOGRvCI0ZzIXKPHVYfHUHtezdOlS1q5da9SdjsuCIiI0Z/I28KWvjtTU1LA5ltdP9LEWegrpGkRozuUNXz+MjY0Nm6z+OXPm8N133xl1Z6AF5wpEaM5lHlDoq2PIkCFWji52Pfv372fDhg1G3T/Dxz4+pyJCcy7fY3ACTcuWLcPmBJrXX3+d48cNz610zekzIjRnM9PXDyMjIxk1apTNroSGNWvWmJWkc0VtPhGas/kKg7SsLl260L+/p0+jBUApxYwZM4y66wOZNrpTYURozuYM8KavjmrVqoXNptC5c+eyZ88eo25XbG0QoTmfj9GL2GUIhwXsWrVq0atXL5RSRiY3oKtoOxoRmvP5AfCZZVunTh369u1rrzc20bRpUx5++GE2b97MggULuP76641Ma+GCUS3CzzeF4BwSgRX4qJuxY8cObr/9dnJzc+33KsBERkZy6623kpqaypAhQ6hTp47VSwvQWf0+T+lxBKGu4CrNcvuTMiArKyvk1YYr06655ho1btw4tWbNGnX27FmjX9OMOx3wGRm2kDsgzXLrqpQ6rHywcuVKVatWrZALprwtKSlJTZs2TX377be+fi0rHFJKvaqU6qGUqu6Az8iwydTRXSzEoEjNbbfdxkcffWSzO+WnatWq3HrrrYwZM4bevXtTq1aFsqh2AtPRB4X8BzgfSB+DgffzeLzFm+iDIMtUVc3KymLdunX+tpaElAvlGNLT0+ncuTNRUVHlfYmTwEZgBrAUMKy26kRkRHMfnwPtLv/hDz/8QMeOHfn222/t98iAiIgIOnTowPDhw0lPT6dBgwYVeZnvgCXorUMfB9RBOwn13FVa'
  Pointer .= 'uduvlAFPPPFEyJ+7ABUXF6eSk5PVokWL1IkTJ4zc9cd5pdSnSql7lVL1HfCeV7rJiOY+rkIXXG14eceePXto3769vyTcoHLttdcyevRohgwZUtGF9FP8d/RaBYTmFwkGoVa6tAq1J5QBkydPtn0E69mzp3rppZdUXl6ekVtm7FZKPaqUaquUinTA+xvwJiOaO2kDfAZUubxj48aNdO/ePegOxMfHM3DgQNLT07n55pupUaPchanOoReYZ6EPvjSsBe4JQq10aRVqVZRSbyofnD59Wg0ePDhoo1fjxo3Vww8/rPbs2ePr9lYoVErlKKVuU0pFO+C9tKVJeN+dnEVvn0m7vCMmJoZhw4axZMmSgN2sevXq3HLLLaSlpdGvXz/q1q1bkZf5BngL/fxluMHMq8jU0b3EAu/io0jN4cOH6du3L9u2bavUDeLj4xk5ciTJycl07969ImtfpeigxhzgfeBIpRxyMTKiuZdidLHVMkKrU6cOQ4cOrbDQOnToQEpKCiNHjqRx48YVeYn/oKOHOei1L8dnbgQbGdHcTUNgOdDy8o5du3bRu3dvf1WkLiEmJoZ+/fpx55130r17d+Lj4yvizw505sZiwDkr5w5ARjR38z3wHj6E1qxZM2677TZ/ZQAAuPrqqxkxYgSZmZm0b9++Ij6cQG/hmQV8hMtSo+xCRjT30wX9/FNm89batWsZMmQIxcXFl/w8JibmYmrUsGHDuO666ypy3/3okesNYCsyPfSLCM0bLAKG+Oro0aMH69evB6BGjRr06dOHMWPG0K9fv4oGN7ajo4ezgcMV9jjMkKmjN5gJ9AGqX95x55138v3339OvXz8mTJhAmzZtKvL6RejjpN4A1qCni0I5kBHNO2xGn4h5CSUlJRw6dIhrr722Iq+5Fx3cWAL8q3LuhTciNO8wDniZyhdcUuhR623gHcJ47SuQiNC8Q210UKJxBa8vQI9cs9E5iKcC45YA8ozmJYrQQYqHynnd7h+v'
  Pointer .= 'ew04EGinBI2MaN6iDXpUM/sCPQZ8ghbYexicWiMEDhGat4gCXsX4lJVD6GeveUhqlK2I0LxHL3SGxk/5FC2wuehsEsFmRGjeoyY6qNETXY5tFnr0KgqhT2GPBEO8xzFgAfBv4LfI4rIj+P89unmi26L1UwAAAABJRU5ErkJggg=='
  bString := Gdip_BitmapFromBase64(&Pointer)
  Return  bString
}

pToken := Gdip_Startup()
hBigCursor := Gdip_CreateHBITMAPFromBitmap(_Torus())
Gdip_Shutdown(pToken)

global avMousePosX, avMousePosY, GuiWidth, GuiHeight
CoordMode "Mouse", "Screen"
MouseGetPos &avMousePosX, &avMousePosY
avMousePosX -= 12
avMousePosY -= 8
global win_mouse := Gui("+AlwaysOnTop +ToolWindow -SysMenu -Caption", APP_NAME)
win_mouse.BackColor := GuiBackColor
WinSetTransColor(GuiBackColor, win_mouse)
win_mouse.AddPicture("+AltSubmit +BackgroundTrans", "HBITMAP:" hBigCursor)



; timer for mouse tracking
global showingTimer := A_TickCount
global shakeSliceTimer := A_TickCount
global shakeTimeoutTimer := A_TickCount
global shakeCount := 0

global nowX := 0, oldX := 0, minX := 0, maxX := 0, hasMin := 0, hasMax := 0

; -------------------------------
; CREATE TRAY
; -------------------------------

_createTray()
{
  Tray.Delete() ; Delete the standard items.
  Tray.Add("About", TrayAbout)
  Tray.Add() ; separator
  Tray.Add("Start with Windows", TrayAutoStart)
  Tray.Add("Enabled", TrayEnabled)
  Tray.Add("Also press ctrl to trigger", TrayUseCtrl)
  Tray.Add() ; separator
  Tray.Add("Sensitivity high", TrayidSensit0)
  Tray.Add("Sensitivity medium", TrayidSensit1)
  Tray.Add("Sensitivity low", TrayidSensit2)
  Tray.Add() ; separator
  Tray.Add("Exit", TestExit)

  global checkTrayAutoStart := False
  global checkEnabled := False
  global checkUseCtrl := False

  ; set tray Icon
  Tray_Icon := "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"
  Tray_Icon .= "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"
  Tray_Icon .= "UKFCUFyyWAZmzpzJXgZu3rwpGjZsqPo7yCoxrIjDCFhSA8DaR3UtevXeu3cvKN+JZQBLCXcZwU4A7mFFdzKSCmJCPmAWhN8aAG9cQkKCKF26dLCDMkKqcrFy5UohlxaWFjh9+rR4+eWXVX/nz2Sjc4QsowHwhsrJp7lz51JKSgq3gRRCqj6TJqFZ0tPTtaxfDqKjo6l3796qH0ffuM6hGTXrgq0BEIodPHiwiIiI4L7Z2OCjPz967OT5+jy2dfv27WPbAmfOnBGRkZEq9wOP005J1pHl4QaWAJw/f14MHTpUlCxZkjv5MBCw/8b2C8V251Sui4uLE3l5eSwBePDggZC2gGZMKvwGkjnamT0JZkJZAJDI0bNnT9WBLT75OLvPE7WBlbZO5dratWuLb775hiUABQUFYv/+/Rxn1DqzJ8FMKAkA4vVvvPGGPwYdTHl01Sruf0dXjdu+roewTZs2jZ0xBK3Rr18/1Xu8VHg/jsTbCgOkuqYWX1+RYYNj2p5WLo1mPOmFn/P6XfXq1RPXrl1j2wLSiAx793Aw0FVhgPwhUq3G+/httFq7r/J9q1atYgsAhKZLly6c+61l9mSYARS+5ygOkuqbny2JVB1fHRhhE5xU+d6YmBhx5coVlgDAh5Camqr5FBTvGw2hLXM+QKgAVZypMECqxOQj8UJVnc4k3Tfg9XsrVqwoPvvsM7YWuH37NidvEI4hW7mHgwU0PMxVHCRvb9Bp4h+6hNj8KZXf6NWrF9szCHz88ceqPgt4tNhHkYYDoIqRrenzTXwGcd0/JNsS35BC+G65yu9UrlxZnDhxgi0Ap06d4riHkT1sSfewkWlMsIL/SnqDI1ZvtEIclRwt+RfSB5EDaA7U1E0gH7UP6NSBEnHUD3BaveN0UeQaKpaVo0FgFoWg1MtqgPGDhElMpk83bSGRtQH7oXGAv43uWkpbwujoaHH27Fm2FsA1VatWVV3KMki3jRyJBqQfivAdeR8kVNbMo+C1TB/m4zcD2hLCPTxmzBjVZeAuOdw97Gl3NkMyTfKPpK+NqIHfTLqhVI2Cu2XCGwcd7XOCWrVqJXJyclgCAPfwoUOHRM2aNVWFYCu5XVk0wCDC6YvYHlUn33v7QIAae5+GaKVKlURaWpo2qVwt0L9/f1UBuEh6uNhFCBEleZYUJggTiQnlIjMzU0hDUkUAYAdNMHtAnAaoXEQNfWqBsmXLiuPHj7MF4Pr166JHjx6qWgBl4ZaJD9iymoUJGJfXST+ytYy3DyILGVvC7t27s9rFoI4Q20lUIAnfBSto+IQTxblbWxcBAidw+HxDsSXMyspSevPz8/PFyZMnxfz58zmuYRi8TnjxLAcEknxuCeHehZvXm+Wfm5srjh49KhITE0WjRo04aWzQRliOHBccsgLgW/gdKUxU06ZNtUkuDtQq7N69W7z11ltCqn1/3NvIYhpp9kA4Gcgl8OkZhDG4Y8cO7W1HoOjcuXNi/fr1onXr1v4ksRQlXMHRZg+Ck4HkDISWfU7WkCFDNFsgKSlJNGvWzJ9s5adxMbnq31TAtJ9PeqDK62Qh4UMx6UN17Uc8xJF5AVYDwstoGRKsyVWZfCSIxpL79lsC0AI7KHQCcJz0HEkXFkJ3CjxbyRuxxMDhs4JMagDpwjsQdURXSZ87Aj8IIzNJsiW5Dh9LA/39UGASjElHO9jfS8aTg5M+7AbYAvNInzx/1TxS3+HX708Gn/HrwhigwSNSyOGh41j1UPPY0yPf0V3fbQ5ECAeQ3skbaVvPsgsgJNjLQ2BQ+GJkEkvI4Erv/wAvIeoP0LodrcFgvWOSkaf4J9JT135LerlX2OC/JoswZqmBxw8AAAAASUVORK5CYII="

  pToken := Gdip_Startup()
  TrayIconData := Gdip_BitmapFromBase64(&Tray_Icon)
  hTrayIcon := Gdip_CreateHICONFromBitmap(TrayIconData)
  TraySetIcon("HICON:" hTrayIcon)
  Gdip_Shutdown(pToken)

  ; set ToolTip text
  A_IconTip := TRAY_TOOLTIP

  ; Initialize autostart
  Try
  {
    RegRead(REGKEY_AUTORUN, APP_NAME)
    Tray.Check("Start with Windows")
    checkTrayAutoStart := True
  }
  Catch  Error as err
  {
    Tray.Uncheck("Start with Windows")
  }

  ; Initialize Enabled
  if(_isEnabled())
  {
    Tray.Check("Enabled")
    checkEnabled := True
  }

  ; Initialize needsCtrl
  if(_needsCtrl())
  {
    Tray.Check("Also press ctrl to trigger")
    checkUseCtrl := True
  }

  ; Initialize sensitivity
  _setSensitivity(0)
}

_setEnabled()
_createTray()


Loop
{
  global avMousePosX, avMousePosY
  CoordMode "Mouse", "Screen"
  MouseGetPos &avMousePosX, &avMousePosY
  avMousePosX -= 12
  avMousePosY -= 8
  _detectMouseMoves()
  _updateMouse()
  Sleep 10
}

; Loop
; {
;   ; global running, ScreenCheck_Tick, ScreenCheck_Init
;   ScreenCheck_Tick++

;   if( ScreenCheck_Init == 0)
;   {
;       ScreenCheck_Tick := 4
;       ScreenCheck_Init := 1
;   }


;   Sleep 10
; }


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


TrayAbout(*)
{
  MsgBox(ABOUT_TEXT, APP_NAME)
}


TrayAutoStart(Item, *)
{
  global checkTrayAutoStart
    Tray.ToggleCheck("Start with Windows")
  if(!checkTrayAutoStart)
  {
    checkTrayAutoStart := True
    RegWrite( "`"" . EXE_NAME . "`"", "REG_SZ", REGKEY_AUTORUN, APP_NAME)
  }
  Else
  {
   checkTrayAutoStart := False
   Try
   {
     RegRead(REGKEY_AUTORUN, APP_NAME)
     RegDelete(REGKEY_AUTORUN, APP_NAME)
   }
   Catch  Error as err
   {
   }
  }
}

TrayEnabled(*)
{
  global checkEnabled
  Tray.ToggleCheck("Enabled")
  if(!checkEnabled)
  {
    checkEnabled := True
    _setEnabled()
  }
  Else
  {
   checkEnabled := False
   Try
   {
     _setDisabled()
   }
   Catch  Error as err
   {
   }
  }
}

TestToggleEnable(*)
{
    Tray.ToggleEnable("TestToggleEnable")
}

TrayUseCtrl(Item, *)
{
  global checkUseCtrl
  Tray.ToggleCheck("Also press ctrl to trigger")
  if(!checkUseCtrl)
  {
    checkUseCtrl := True
    _setUseCtrl()
  }
  Else
  {
   checkUseCtrl := False
   Try
   {
     _unsetUseCtrl()
   }
   Catch  Error as err
   {
   }
  }
}

TrayidSensit0(Item, *)
{
    _setSensitivity(SENSITIVITY_HIGH)
}
TrayidSensit1(Item, *)
{
    _setSensitivity(SENSITIVITY_MEDIUM)
}
TrayidSensit2(Item, *)
{
    _setSensitivity(SENSITIVITY_LOW)
}

TestExit(Item, *)
{
    ExitApp
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HELPER FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; -------------------------------
; DETECT MOUSE MOVES
; -------------------------------

_detectMouseMoves()
{
  global nowX, oldX, minX, maxX, hasMin, hasMax, avMousePosX
  nowX := avMousePosX
  if(nowX < oldX)
  {
    if(hasMin == 0)
    {
      hasMin := 1
      minX := nowX
    }
    Else
    {
      minX := _min(minX, nowX)
    }

  }
  Else
  {
    if(nowX > oldX)
    {
      if(hasMax == 0)
      {
        hasMax := 1
        maxX := nowX
      }
      Else
      {
        maxX := _max(maxX, nowX)
      }
    }
  }
  oldX := nowX
}


; -------------------------------
; UPDATE MOUSE
; -------------------------------

_updateMouse()
{
    global showing, shakeCount, shakeTimeoutTimer, SHAKE_TIMEOUT
  if(showing == 1)
  {
    _moveBigMouse()
    _hideBigMouseOnTimeout()
  }
  Else
  {
    if(_isShaking())
    {
      _showBig()
      _moveBigMouse()
    }
  }

  if( (A_TickCount - shakeTimeoutTimer) >= SHAKE_TIMEOUT)
  {
    shakeCount := 0
  }
}


; -------------------------------
; IS SHAKING
; -------------------------------

_isShaking()
{
  global isShaking, shakeSliceTimer, SHAKE_SLICE_TIMEOUT, hasMin, hasMax, maxX, minX, SHAKE_DIST, shakeCount, shakeTimeoutTimer, needed_shake_count, showingTimer
  if(_needsCtrl() && !_isCtrlPressed())
  {
    Return 0
  }
  isShaking := 0
  if( (A_TickCount - shakeSliceTimer) >= SHAKE_SLICE_TIMEOUT)
  {
    shakeSliceTimer := A_TickCount
    if(hasMin == 1 && hasMax == 1 && (maxX - minX > SHAKE_DIST) )
    {
      shakeCount++
      shakeTimeoutTimer := A_TickCount
    }

    if(shakeCount >= needed_shake_count && _isEnabled() )
    {
      showingTimer := A_TickCount
      shakeCount := 0
      isShaking := 1
      _showBig()
    }

    hasMin := 0
    hasMax := 0
    minX := 0
    maxX := 0
  }
  Return isShaking
}


; -------------------------------
; IS CTRL PRESSED
; -------------------------------

_isCtrlPressed()
{
  Return GetKeyState("LControl") || GetKeyState("RControl")
}

; -------------------------------
; MOVE BIG MOUSE
; -------------------------------

_moveBigMouse()
{
  global avMousePosX, avMousePosY
  CoordMode "Mouse", "Screen"
  MouseGetPos &avMousePosX, &avMousePosY
  avMousePosX -= 12
  avMousePosY -= 8
  ws_ID := win_mouse.Hwnd
  win_mouse.Show("x" . avMousePosX . " y" . avMousePosY . " NoActivate")
}

; -------------------------------
; HIDE BIG MOUSE ON TIME OUT
; -------------------------------

_hideBigMouseOnTimeout()
{
  global showingTimer, SHOWING_TIMEOUT, shakeCount
  if( (A_TickCount - showingTimer) >= SHOWING_TIMEOUT)
  {
    _hideBig()
    shakeCount := 0
  }
}

; -------------------------------
; SHOW BIG
; -------------------------------

_showBig()
{
  global showing, avMousePosX, avMousePosY
  if(showing == 0)
  {
    showing := 1
    SetSystemCursor("")
  }
}

; -------------------------------
; HIDE BIG
; -------------------------------

_hideBig()
{
  global showing
  if(showing != 0)
  {
    showing := 0
    RestoreCursor()
    win_mouse.Hide()
  }
}

; -------------------------------
; MIN
; -------------------------------


_min(a, b)
{
  if(a < b)
  {
    Return a
  }
  Else
  {
    Return b
  }
}

; -------------------------------
; MAX
; -------------------------------

_max(a, b)
{
  if(a > b)
  {
    Return a
  }
  Else
  {
    Return b
  }
}



; -------------------------------
; ENABLED TEST
; -------------------------------


_isEnabled()
{
  Try
  {
    RegRead(REGKEY_CONFIG, REGKEY_ENABLED)
    Return True
  }
  Catch  Error as err
  {
    Return False
  }
}

; -------------------------------
; ENABLE
; -------------------------------

_setEnabled()
{
  Try
  {
    RegWrite( "1", "REG_SZ", REGKEY_CONFIG, REGKEY_ENABLED)
  }
  Catch Error as err
  {
    MsgBox Error
  }
}

; -------------------------------
; DISABLE
; -------------------------------

_setDisabled()
{
  RegWrite( "0", "REG_SZ", REGKEY_CONFIG, REGKEY_ENABLED)
}

; -------------------------------
; USECTRL TEST
; -------------------------------

_needsCtrl()
{
  Try
  {
    RegRead(REGKEY_CONFIG, REGKEY_TCTRL)
    Return True
  }
  Catch  Error as err
  {
    Return False
  }
}

; -------------------------------
; SET USECTRL
; -------------------------------

_setUseCtrl()
{
  Try
  {
    RegWrite( "1", "REG_SZ", REGKEY_CONFIG, REGKEY_TCTRL)
  }
  Catch Error as err
  {
    MsgBox Error
  }
}

; -------------------------------
; UNSET USECTRL
; -------------------------------


_unsetUseCtrl()
{
  RegWrite( "0", "REG_SZ", REGKEY_CONFIG, REGKEY_TCTRL)
}


; -------------------------------
; Set SENSITIVITY
; -------------------------------

_setSensitivity(sval)
{
  if(sval == 0)
  {
    sval := _getSensitivity()
  }
  Else
  {
    RegWrite( sval, "REG_DWORD", REGKEY_CONFIG, REGKEY_SENSIT)
  }

  needed_shake_count := sval

  sname := _sensitivityToName(sval)
  if(sname == "High")
  {
    Tray.Check("Sensitivity high")
    Tray.Uncheck("Sensitivity medium")
    Tray.Uncheck("Sensitivity low")
  }
  else
  if(sname == "Medium")
  {
    Tray.Check("Sensitivity medium")
    Tray.Uncheck("Sensitivity high")
    Tray.Uncheck("Sensitivity low")
  }
  else
  if(sname == "Low")
  {
    Tray.Check("Sensitivity low")
    Tray.Uncheck("Sensitivity high")
    Tray.Uncheck("Sensitivity medium")
  }
}


; -------------------------------
; GET SENSITIVITY
; -------------------------------

_getSensitivity()
{
  Try
  {
    sval := Number(RegRead(REGKEY_CONFIG, REGKEY_SENSIT))
    Return sval
  }
  Catch  Error as err
  {
    sval := 2
    Return sval
  }
}

; -------------------------------
; SENSITIVITY TO NAME
; -------------------------------

_sensitivityToName(sval)
{
  if(sval <= SENSITIVITY_HIGH)
  {
    Return "High"
  }
  else
  if(sval == SENSITIVITY_MEDIUM)
  {
    Return "Medium"
  }
  else
  {
    Return "Low"
  }
}

; -------------------------------
; BASE64 DECODE / ENCODE
; -------------------------------

Base64Decode(s) {
   ; Trim whitespace and remove mime type.
   s := Trim(s)
   s := RegExReplace(s, "(?i)^.*?;base64,")

   ; Retrieve the size of bytes from the length of the base64 string.
   size := StrLen(RTrim(s, "=")) * 3 // 4
   bin := Buffer(size)

   ; Place the decoded base64 string into a binary buffer.
   flags := 0x1 ; CRYPT_STRING_BASE64
   DllCall("crypt32\CryptStringToBinary", "str", s, "uint", 0, "uint", flags, "ptr", bin, "uint*", size, "ptr", 0, "ptr", 0)

   ; Must reinterpret the binary bytes from UTF-8.
   return StrGet(bin, size, "UTF-8")
}

Base64Encode(s) {
   ; Convert the input string into a byte string of UTF-8 characters.
   size := StrPut(s, "UTF-8")
   bin := Buffer(size)
   StrPut(s, bin, "UTF-8")
   size := size - 1 ; A binary does not have a null terminator

   ; Calculate the length of the base64 string.
   length := 4 * Ceil(size / 3) + 1   ; A string has a null terminator
   VarSetStrCapacity(&str, length)    ; Allocates a ANSI or Unicode string
   ; This appends 1 or 2 zero byte null terminators respectively.

   ; Passing a pre-allocated string buffer prevents an additional memory copy via StrGet.
   flags := 0x40000001 ; CRYPT_STRING_NOCRLF | CRYPT_STRING_BASE64
   DllCall("crypt32\CryptBinaryToString", "ptr", bin, "uint", size, "uint", flags, "str", str, "uint*", &length)

   ; Returns an AutoHotkey native string.
   return str
}


; Source:   Serenity - https://autohotkey.com/board/topic/32608-changing-the-system-cursor/
; Modified: iseahound - https://www.autohotkey.com/boards/viewtopic.php?t=75867

SetSystemCursor(Cursor := "", cx := 0, cy := 0) {

   static SystemCursors := Map("APPSTARTING", 32650, "ARROW", 32512, "CROSS", 32515, "HAND", 32649, "HELP", 32651, "IBEAM", 32513, "NO", 32648,
                           "SIZEALL", 32646, "SIZENESW", 32643, "SIZENS", 32645, "SIZENWSE", 32642, "SIZEWE", 32644, "UPARROW", 32516, "WAIT", 32514)

   if (Cursor = "") {
      AndMask := Buffer(128, 0xFF), XorMask := Buffer(128, 0)

      for CursorName, CursorID in SystemCursors {
         CursorHandle := DllCall("CreateCursor", "ptr", 0, "int", 0, "int", 0, "int", 32, "int", 32, "ptr", AndMask, "ptr", XorMask, "ptr")
         DllCall("SetSystemCursor", "ptr", CursorHandle, "int", CursorID) ; calls DestroyCursor
      }
      return
   }

   if (Cursor ~= "^(IDC_)?(?i:AppStarting|Arrow|Cross|Hand|Help|IBeam|No|SizeAll|SizeNESW|SizeNS|SizeNWSE|SizeWE|UpArrow|Wait)$") {
      Cursor := RegExReplace(Cursor, "^IDC_")

      if !(CursorShared := DllCall("LoadCursor", "ptr", 0, "ptr", SystemCursors[StrUpper(Cursor)], "ptr"))
         throw Error("Error: Invalid cursor name")

      for CursorName, CursorID in SystemCursors {
         CursorHandle := DllCall("CopyImage", "ptr", CursorShared, "uint", 2, "int", cx, "int", cy, "uint", 0, "ptr")
         DllCall("SetSystemCursor", "ptr", CursorHandle, "int", CursorID) ; calls DestroyCursor
      }
      return
   }

   if FileExist(Cursor) {
      SplitPath Cursor,,, &Ext:="" ; auto-detect type
      if !(uType := (Ext = "ani" || Ext = "cur") ? 2 : (Ext = "ico") ? 1 : 0)
         throw Error("Error: Invalid file type")

      if (Ext = "ani") {
         for CursorName, CursorID in SystemCursors {
            CursorHandle := DllCall("LoadImage", "ptr", 0, "str", Cursor, "uint", uType, "int", cx, "int", cy, "uint", 0x10, "ptr")
            DllCall("SetSystemCursor", "ptr", CursorHandle, "int", CursorID) ; calls DestroyCursor
         }
      } else {
         if !(CursorShared := DllCall("LoadImage", "ptr", 0, "str", Cursor, "uint", uType, "int", cx, "int", cy, "uint", 0x8010, "ptr"))
            throw Error("Error: Corrupted file")

         for CursorName, CursorID in SystemCursors {
            CursorHandle := DllCall("CopyImage", "ptr", CursorShared, "uint", 2, "int", 0, "int", 0, "uint", 0, "ptr")
            DllCall("SetSystemCursor", "ptr", CursorHandle, "int", CursorID) ; calls DestroyCursor
         }
      }
      return
   }

   throw Error("Error: Invalid file path or cursor name")
}

RestoreCursor() {
   return DllCall("SystemParametersInfo", "uint", SPI_SETCURSORS := 0x57, "uint", 0, "ptr", 0, "uint", 0)
}
